#!/bin/bash

### wifi Usage:help
#
# Some simple wifi controls wrapping around nmcli
#
# USAGE
# =====
#
# 	nmcli [ list | start | stop | restart | connect ACCESSPOINT [PASSWORD] | forget ACCESSPOINT ]
#
# list
# 	Lists available access points
#
# start
# 	Activates the wifi device
#
# stop
# 	Stop the wifi device
#
# restart
# 	Restart the wifi device
#
# connect [ ACCESSPOINT [ PASSWORD ] ]
# 	Connect to the given access point, optionally providing a password
# 	If the password is provided, it is saved for future use.
# 	If the password is not provided, but a saved password exists, that saved password is used.
#
# 	If neither ACCESSPOINT nor PASSWORD are provided, you will be given a choice of any of the available networks you have previosuly connected to.
#
# forget ACCESSPOINT
# 	Forget the access point and password
#
# License:
#
# (C) 2017 Tai Kedzierski
# Released under GNU General Public License v3
#
###/doc

#!/bin/bash

#!/bin/bash

export CDEF="[0m"
export CRED="[31m"
export CGRN="[32m"
export CYEL="[33m"
export CBLU="[34m"
export CBRED="[1;31m"
export CBGRN="[1;32m"
export CBYEL="[1;33m"
export CBBLU="[1;34m"

MODE_DEBUG=no

### debuge MESSAGE Usage:bbuild
# print a blue debug message to stderr
# only prints if MODE_DEBUG is set to "yes"
###/doc
function debuge {
	if [[ "$MODE_DEBUG" = yes ]]; then
		echo -e "${CBBLU}DEBUG:$CBLU$*$CDEF" 1>&2
	fi
}

### infoe MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function infoe {
	echo -e "$CGRN$*$CDEF" 1>&2
}

### warne MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function warne {
	echo -e "${CBYEL}WARN:$CYEL $*$CDEF" 1>&2
}

### faile MESSAGE CODE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function faile {
	local MSG=
	local ARG=
	local ERCODE=127
	local numpat='^[0-9]+$'
	while [[ -n "$*" ]]; do
		ARG=$1 ; shift
		if [[ -z "$*" ]] && [[ "$ARG" =~ $numpat ]]; then
			ERCODE=$ARG
		else
			MSG="$MSG $ARG"
		fi
	done
	echo "${CBRED}ERROR FAIL:$CRED$MSG$CDEF" 1>&2
	exit "$ERCODE"
}

function dumpe {
	echo -n "[1;35m$*" 1>&2
	echo -n "[0;35m" 1>&2
	cat - 1>&2
	echo -n "[0m" 1>&2
}

if [[ "$*" =~ --debug ]]; then
	MODE_DEBUG=yes
fi
#!/bin/bash

### printhelp Usage:bbuild
# Write your help as documentation comments in your script
#
# If you need to output the help from a running script, call the
# `printhelp` function and it will print the help documentation
# in the current script to stdout
#
# A help comment looks like this:
#
#	### <title> Usage:help
#	#
#	# <some content>
#	#
#	# end with "###/doc" on its own line (whitespaces before
#	# and after are OK)
#	#
#	###/doc
#
###/doc

CHAR='#'

function printhelp {
	USAGESTRING=help
	TARGETFILE=$0
	if [[ -n "$*" ]]; then USAGESTRING="$1" ; shift; fi
	if [[ -n "$*" ]]; then TARGETFILE="$1" ; shift; fi

        echo -e "\n$(basename "$TARGETFILE")\n===\n"
        local SECSTART='^\s*'"$CHAR$CHAR$CHAR"'\s+(.+?)\s+Usage:'"$USAGESTRING"'\s*$'
        local SECEND='^\s*'"$CHAR$CHAR$CHAR"'\s*/doc\s*$'
        local insec="$(mktemp --tmpdir)"; rm "$insec"
        cat "$TARGETFILE" | while read secline; do
                if [[ "$secline" =~ $SECSTART ]]; then
                        touch "$insec"
                        echo -e "\n${BASH_REMATCH[1]}\n---\n"
                elif [[ -f $insec ]]; then
                        if [[ "$secline" =~ $SECEND ]]; then
                                rm "$insec"
                        else
				echo "$secline" | sed -r "s/^\s*$CHAR//g"
                        fi
                fi
        done
        if [[ -f "$insec" ]]; then
                echo "WARNING: Non-terminated help block." 1>&2
		rm "$insec"
        fi
	echo ""
}

### automatic help Usage:bbuild
#
# automatically call help if "--help" is detected in arguments
#
###/doc
if [[ "$@" =~ --help ]]; then
	printhelp
	exit 0
fi
#!/bin/bash

### AskUser Usage:bbuild
# Present the user with questions on stdout
###/doc


yespat='^(yes|YES|y|Y)$'
numpat='^[0-9]+$'
rangepat='[0-9]+,[0-9]+'
blankpat='^ *$'

### uconfirm Usage:bbuild
# Ask the user to confirm a closed question. Defaults to no
#
# returns 0 on successfully match 'y' or 'yes'
# returns 1 otherwise
###/doc
function uconfirm {
	read -p "$* [y/N] > " 1>&2
	if [[ "$REPLY" =~ $yespat ]]; then
		return 0
	else
		return 1
	fi
}

### uask Usage:bbuild
# Ask the user to provide some text
#
# returns the entered text
###
function uask {
	read -p "$* : " 1>&2
	echo $REPLY
}

### uchoose_multi Usage:bbuild
# Allows the user to choose from multiple choices
#
# uchose_multi MESG CHOICESTRING
#
#
# MESG is a single string token that will be displayed as prompt
#
# CHOICESTRING is a comma-separated, or newline separated, or "\\n"-separated token string
#
# Equivalent strings include:
#
# * `"a\\nb\\nc"` - quoted and explicit newline escapes
# * `"a,b,c"` - quoted and separated with commas
# * `a , b , c` - not quoted, separated by commas
# * (and `a`, `b` and `c` on their own lines)
#
# User input:
#
# User can choose by selecting
#
# * a single item by number
# * a range of numbers (4,7 for range 4 to 7)
# * or a string that matches the pattern
#
# All option lines that match will be returned, one per line
#
# If the user selects nothing, then function returns 1 and an empty stdout
###/doc
function uchoose_multi {
	local mesg=$1; shift
	local choices=$(echo "$*"|sed -r 's/ *, */\n/g')
	debuge "CHOICES: $choices"

	infoe "$mesg:" 
	echo -e "$choices"|egrep '^' -n| sed 's/:/: /' 1>&2
	
	local sel=$(uask "Choice")
	if [[ "$sel" =~ $blankpat ]]; then
		return 1
	elif [[ "$sel" =~ $numpat ]] || [[ "$sel" =~ $rangepat ]]; then
		debuge "Number choice [$sel]"
		echo -e "$choices" | sed -n "$sel p"
	else
		debuge "Pattern choice [$sel]"
		echo -e "$choices"  |egrep "$(echo "$sel"|tr " " '|')"
	fi
	return 0
}

### uchoose Usage:bbuild
# Ask the user to choose an item
#
# Like uchoose_multi, but will loop if the user selects more than one item
#
# If the provides no entry, returns 0
#
# If the user chooses one item, that item is echoed to stdout
###/doc
function uchoose {
	local mesg=$1; shift
	while true; do
		local thechoice="$(uchoose_multi "$mesg" "$*")"
		local lines=$(echo "$thechoice" | wc -l)
		if [[ $lines = 1 ]]; then
			echo "$thechoice"
			return 0
		else
			warne "Too many results"
		fi
	done
}


if [[ -z "$(which nmcli)" ]]; then
	faile 'Required program `nmcli` not found.'
fi

if [[ -z "$*" ]]; then
	nmcli connection show --active | grep wireless
	exit
fi

WIFICMD="$1" ; shift

function getaccesspoint {
	local knownnetworks=$(nmcli connection show|sed -r 's/  +/;/g'|cut -d";" -f1|sed -r -e 's/ [0-9]+$//' -e 's/$/;/'|egrep -v '^NAME$'|sort|uniq|xargs echo|sed 's/; /|/g')
	uchoose "Connect to which network?" "$(nmcli device wifi list | sed -r 's/  +/;/g' |tail -n +2| cut -d';' -f2|egrep "$knownnetworks")"
}

function newconn {
	WIFI_AP="$1"; shift
	WIFI_PW="$1"; shift

	infoe "Trying to establish new connection ..."

	if [[ -n "$WIFI_PW" ]]; then
		nmcli device wifi connect "$WIFI_AP" password "$WIFI_PW" ; RES=$?
	else
		nmcli device wifi connect "$WIFI_AP" ; RES="$?"
	fi

	return "$RES"
}

function oldconn {
	WIFI_AP="$1"; shift
	infoe "Trying old connections ..."

	nmcli connection up "$WIFI_AP" ; RES=$?

	return "$RES"
}

case "$WIFICMD" in
	restart)
		debuge Deactivating wifi
		nmcli radio wifi off

		debuge Re-activating wifi
		nmcli radio wifi on

		infoe Done.
		;;
	stop)
		debuge Deactivating wifi
		nmcli radio wifi off
		infoe Done.
		;;
	start)
		debuge Re-activating wifi
		nmcli radio wifi on
		infoe Done.
		;;
	connect)
		nmcli device wifi rescan
		WIFI_AP="$1"; shift
		WIFI_PW="$1"; shift

		if [[ -z  "$WIFI_AP" ]]; then
			WIFI_AP=$(getaccesspoint)
		fi
		infoe "Connecting to $WIFI_AP"

		oldconn "$WIFI_AP" || newconn "$WIFI_AP" "$WIFI_PW"
		;;
	forget)
		WIFI_AP="$1"; shift
		nmcli connection delete "$WIFI_AP" && {
			infoe Done.
		}
		;;
	list)
		nmcli device wifi rescan
		nmcli device wifi list
		;;
	old)
		WIFI_AP="$1" ; shift
		if [[ -z "$WIFI_AP" ]]; then
			nmcli connection show|grep wireless
		else
			nmcli connection show "$WIFI_AP"|grep wireless
		fi
		;;
	*)
		faile "Invalid command $WIFICMD"
		;;
esac
