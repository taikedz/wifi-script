#!/bin/bash

### wifi Usage:help
#
# Some simple wifi controls wrapping around nmcli
#
# USAGE
# =====
#
#     wifi [ list | start | stop | restart | connect ACCESSPOINT [PASSWORD] | forget ACCESSPOINT ]
#
# list
#     Lists available access points
#
# start
#     Activates the wifi device
#
# stop
#     Stop the wifi device
#
# restart
#     Restart the wifi device
#
# connect [ ACCESSPOINT [ PASSWORD ] ]
#     Connect to the given access point, optionally providing a password
#     If the password is provided, it is saved for future use.
#     If the password is not provided, but a saved password exists, that saved password is used.
#
#     If neither ACCESSPOINT nor PASSWORD are provided, you will be given a choice of any of the available networks you have previosuly connected to.
#
# forget ACCESSPOINT
#     Forget the access point and password
#
# License:
#
# (C) 2018 Tai Kedzierski
# Released under GNU General Public License v3
#
###/doc

#%include out.sh autohelp.sh askuser.sh bincheck.sh

function getaccesspoint {
    local knownnetworks
    knownnetworks=$(nmcli connection show|sed -r 's/  +/;/g'|cut -d";" -f1|sed -r -e 's/ [0-9]+$//' -e 's/$/;/'|egrep -v '^NAME$'|sort|uniq|xargs echo|sed 's/; /|/g')
    askuser:choose "Connect to which network?" "$(nmcli device wifi list | sed -r 's/  +/;/g' |tail -n +2| cut -d';' -f2|egrep "$knownnetworks")"
}

function newconn {
    local wifi_ap wifi_pw res

    wifi_ap="$1"; shift
    wifi_pw="$1"; shift

    out:info "Trying to establish new connection ..."

    if [[ -n "$wifi_pw" ]]; then
        nmcli device wifi connect "$wifi_ap" password "$wifi_pw" ; res="$?"
    else
        nmcli device wifi connect "$wifi_ap" ; res="$?"
    fi

    return "$res"
}

function oldconn {
    local wifi_ap res

    wifi_ap="$1"; shift
    out:info "Trying old connections ..."

    nmcli connection up "$wifi_ap" ; res="$?"

    return "$res"
}

main() {

    bincheck:has nmcli || out:fail 'Required program `nmcli` not found.'

    if [[ -z "$*" ]]; then
        nmcli connection show --active | grep wireless
        exit 0
    fi

    WIFICMD="$1" ; shift

    dispatch_command
}

dispatch_command() {
    local wifi_ap wifi_pw
    case "$WIFICMD" in
        restart)
            nmcli radio wifi off
            nmcli radio wifi on

            out:info "Done."
            ;;
        stop)
            nmcli radio wifi off
            out:info Done.
            ;;
        start)
            nmcli radio wifi on
            out:info Done.
            ;;
        connect)
            nmcli device wifi rescan

            wifi_ap="${1:-}"; shift || out:fail "No access point specified"
            wifi_pw="${1:-}"; shift || :

            if [[ -z  "$wifi_ap" ]]; then
                wifi_ap="$(getaccesspoint)"
            fi
            out:info "Connecting to $wifi_ap"

            oldconn "$wifi_ap" || newconn "$wifi_ap" "$wifi_pw"
            ;;
        forget)
            wifi_ap="$1"; shift
            nmcli connection delete "$wifi_ap" && out:info Done. || out:fail "Could not delete '$wifi_ap'"
            ;;
        list)
            nmcli device wifi rescan
            nmcli device wifi list
            ;;
        old)
            wifi_ap="$1" ; shift
            if [[ -z "$wifi_ap" ]]; then
                nmcli connection show|grep wireless
            else
                nmcli connection show "$wifi_ap"|grep wireless
            fi
            ;;
        *)
            out:fail "Invalid command $WIFICMD"
            ;;
    esac
}

main "$@"
